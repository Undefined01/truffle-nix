/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("buildlogic.java-library-conventions")
}

dependencies {
    testImplementation("io.github.tree-sitter:jtreesitter:0.24.0")
}

tasks.named("processResources") {
    dependsOn("buildNativeLibrary")
}

tasks.register("buildNativeLibrary") {
    inputs.dir("src/main/c/tree-sitter")
    inputs.dir("src/main/c/tree-sitter-nix")
    outputs.file("src/main/resources/libtree-sitter.so")
    outputs.file("src/main/resources/libtree-sitter-nix.so")

    doLast {
        exec {
            workingDir = file("src/main/c/tree-sitter")
            commandLine("make")
        }

        val sourceFile = file("src/main/c/tree-sitter/libtree-sitter.so")
        val destinationFile = file("src/main/resources/libtree-sitter.so")

        if (sourceFile.exists()) {
            sourceFile.copyTo(destinationFile, overwrite = true)
            println("Native library copied to resources folder.")
        } else {
            throw GradleException("Native library not found after build.")
        }
    }

    doLast {
        exec {
            workingDir = file("src/main/c/tree-sitter-nix")
            commandLine("gcc", "-shared", "-fPIC", "-o", "libtree-sitter-nix.so", "src/parser.c", "src/scanner.c", "-I", "src")
        }

        val sourceFile = file("src/main/c/tree-sitter-nix/libtree-sitter-nix.so")
        val destinationFile = file("src/main/resources/libtree-sitter-nix.so")

        if (sourceFile.exists()) {
            sourceFile.copyTo(destinationFile, overwrite = true)
            println("Native library copied to resources folder.")
        } else {
            throw GradleException("Native library not found at ${sourceFile.absolutePath} after build.")
        }
    }
}

tasks.clean {
    doLast {
        file("src/main/resources/libtree-sitter.so").delete()
        file("src/main/resources/libtree-sitter-nix.so").delete()
    }

    doLast {
        exec {
            workingDir = file("src/main/c/tree-sitter")
            commandLine("make", "clean")
        }
    }

    doLast {
        file("src/main/c/tree-sitter/libtree-sitter.so").delete()
    }
}

tasks.withType<JavaExec> {
    environment("LD_LIBRARY_PATH", "${project(":tree-sitter-nix").projectDir}/src/main/resources")
}
